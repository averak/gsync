package net.averak.gsync.protoc

import com.google.protobuf.DescriptorProtos.FileDescriptorProto
import com.google.protobuf.DescriptorProtos.ServiceDescriptorProto
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File

fun main() {
    val request = CodeGeneratorRequest.parseFrom(System.`in`)
    val response = generateCode(request)
    response.writeTo(System.out)
}

fun generateCode(request: CodeGeneratorRequest): CodeGeneratorResponse {
    val responseBuilder = CodeGeneratorResponse.newBuilder()

    request.protoFileList
        .filter { request.fileToGenerateList.contains(it.name) }
        .forEach { file ->
            file.serviceList.forEach { service ->
                val dirname = file.options.javaPackage.replace(".", "/")
                responseBuilder.addFile(generateHandlerInterface(file, service, dirname))
                responseBuilder.addFile(generateHandlerWrapper(file, service, dirname))
            }
        }

    return responseBuilder.build()
}

fun generateHandlerInterface(file: FileDescriptorProto, service: ServiceDescriptorProto, dirname: String): File {
    val filename = "$dirname/I${service.name}Handler.java"
    val contentBuilder = StringBuilder()
    contentBuilder.appendLine("// Generated by protoc-gen-java-gsync-server. DO NOT EDIT!")
    contentBuilder.appendLine("// source: ${file.name}")
    contentBuilder.appendLine("package ${file.options.javaPackage};")
    contentBuilder.appendLine("")
    contentBuilder.appendLine("import net.averak.gsync.infrastructure.grpc.player_api.Request;")
    contentBuilder.appendLine("")
    contentBuilder.appendLine("import javax.annotation.Nonnull;")
    contentBuilder.appendLine("")
    contentBuilder.appendLine("public interface I${service.name}Handler {")
    service.methodList.forEach { method ->
        contentBuilder.appendLine("    @Nonnull")
        val inputType = method.inputType.replace(".${file.`package`}.", "")
        val outputType = method.outputType.replace(".${file.`package`}.", "")
        contentBuilder.appendLine(
            "    $outputType ${method.name.decapitalizeFirstLetter()}(@Nonnull Request<$inputType> request);",
        )
    }
    contentBuilder.appendLine("}")

    return File.newBuilder()
        .setName(filename)
        .setContent(contentBuilder.toString())
        .build()
}

fun generateHandlerWrapper(file: FileDescriptorProto, service: ServiceDescriptorProto, dirname: String): File {
    val contentBuilder = StringBuilder()
    contentBuilder.appendLine("// Generated by protoc-gen-java-gsync-server. DO NOT EDIT!")
    contentBuilder.appendLine("// source: ${file.name}")
    contentBuilder.appendLine("package ${file.options.javaPackage};")
    contentBuilder.appendLine("")
    contentBuilder.appendLine("import io.grpc.stub.StreamObserver;")
    contentBuilder.appendLine("import net.averak.gsync.infrastructure.grpc.player_api.HandlerWrapper;")
    contentBuilder.appendLine("import net.averak.gsync.infrastructure.grpc.player_api.Request;")
    contentBuilder.appendLine("import org.springframework.stereotype.Component;")
    contentBuilder.appendLine("")
    contentBuilder.appendLine("@Component")
    contentBuilder.appendLine("public class ${service.name}HandlerWrapper extends ${service.name}Grpc.${service.name}ImplBase {")
    contentBuilder.appendLine("    private final HandlerWrapper handlerWrapper;")
    contentBuilder.appendLine("    private final I${service.name}Handler handler;")
    contentBuilder.appendLine("")
    contentBuilder.appendLine("    public ${service.name}HandlerWrapper(HandlerWrapper handlerWrapper, I${service.name}Handler handler) {")
    contentBuilder.appendLine("        this.handlerWrapper = handlerWrapper;")
    contentBuilder.appendLine("        this.handler = handler;")
    contentBuilder.appendLine("    }")
    contentBuilder.appendLine("")
    service.methodList.forEach { method ->
        // TODO: custom_option を読み込む
        // なぜか method.options.getExtension(CustomOption.playerApiMethodOption) で取得できないので、その問題調査から行う必要がある。
//        if (method.hasOptions() && method.options.hasExtension(CustomOption.playerApiMethodOption)) {
//        }

        val inputType = method.inputType.replace(".${file.`package`}.", "")
        val outputType = method.outputType.replace(".${file.`package`}.", "")
        contentBuilder.appendLine("    @Override")
        contentBuilder.appendLine(
            "    public void ${method.name.decapitalizeFirstLetter()}($inputType request, StreamObserver<$outputType> responseObserver) {",
        )
        contentBuilder.appendLine(
            "        handlerWrapper.invoke(handler::${method.name.decapitalizeFirstLetter()}, request, responseObserver);",
        )
        contentBuilder.appendLine("}")
        contentBuilder.appendLine("")
    }
    contentBuilder.appendLine("}")

    return File.newBuilder()
        .setName("$dirname/${service.name}HandlerWrapper.java")
        .setContent(contentBuilder.toString())
        .build()
}

fun String.decapitalizeFirstLetter(): String {
    if (this.isEmpty()) return this
    return this[0].lowercaseChar() + this.substring(1)
}
